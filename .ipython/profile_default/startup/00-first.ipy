#!/usr/bin/env ipython

from __future__ import print_function
from sys import stdout, stderr, exit
import os, stat
import __main__
from collections import OrderedDict

def notebookType() :
	try :
		from IPython import get_ipython
		shell = get_ipython().__class__.__name__
		if shell == 'ZMQInteractiveShell':
			isNB = True   # Jupyter notebook or qtconsole
			interpreter = "Jupyter"
		elif shell == 'TerminalInteractiveShell':
			isNB = False  # Terminal running IPython
			interpreter = "IPython"
		else :
			isNB = False  # Terminal running Python
			interpreter = "Python"
	except NameError as why :
		print( "=> ERROR: %s" % why, file = stderr )
		isNB = False      # Probably standard Python interpreter
		interpreter = "UNKNOWN"

#	print( "=> interpreter = <%s>" % interpreter )
	return interpreter

def init_Jupyter() : # https://github.com/jupyter/notebook/issues/3718
	XDG_RUNTIME_DIR = os.environ.get('XDG_RUNTIME_DIR')
	if XDG_RUNTIME_DIR :
		jupyterRunTimeDIR = XDG_RUNTIME_DIR + '/jupyter'
	else :
		import jupyter_core.paths
		jupyterRunTimeDIR = jupyter_core.paths.jupyter_runtime_dir()

	print( "=> Adding the sticky bit to Jupyter RunTime DIR : %s...\n" % jupyterRunTimeDIR )
	if not os.path.exists( jupyterRunTimeDIR ) : os.mkdir( jupyterRunTimeDIR, mode = 0o755 ) # MacOS does not support setting the sticky bit during the "mkdir", it has to be done in the "chmod" call, see "man 2 mkdir"
	os.chmod(jupyterRunTimeDIR, os.stat(jupyterRunTimeDIR).st_mode | stat.S_ISVTX ) # Add the sticky bit

try :
	print( "\n=> Starting the init script <%s> ...\n" % __main__.__file__ , file = stderr )
	init_Jupyter()

	if notebookType() == "Jupyter" :
		print( "=> This is a Jupyter notebook, switching to <notebook> backend.", file=stderr )
#		%matplotlib inline
		%matplotlib notebook
	elif notebookType() == "IPython" :
		%matplotlib auto

	import matplotlib as mpl
	import matplotlib.pyplot as plt
	import numpy as np
	import pandas as pd, pandas as pda
	# reload external modules when they change.
	%reload_ext autoreload
	%autoreload 2
	%reload_ext tikzmagic

except Exception as why :
	print("\n%s\n" % why)

print( "=> Imported modules are :\n" )
%whos module
print( "\n=> End of the init script." )
